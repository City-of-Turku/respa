# Generated by Django 2.2.11 on 2020-09-17 10:00

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('notifications', '0013_merge_20200520_1347'),
    ]

    operations = [
        migrations.AddField(
            model_name='notificationtemplate',
            name='name',
            field=models.CharField(default='default', help_text='Name that is used to help differentiate between two templates when listing all templates.', max_length=100, verbose_name='Name'),
        ),
        migrations.AlterField(
            model_name='notificationtemplate',
            name='type',
            field=models.CharField(choices=[('reservation_requested', 'Reservation requested'), ('reservation_requested_official', 'Reservation requested official'), ('reservation_requested_official_by_official', 'Reservation requested by official'), ('reservation_cancelled', 'Reservation cancelled'), ('reservation_cancelled_official', 'Reservation cancelled official'), ('reservation_cancelled_by_official', 'Reservation cancelled by official'), ('reservation_created', 'Reservation created'), ('reservation_created_official', 'Reservation created official'), ('reservation_created_by_official', 'Reservation created by official'), ('reservation_modified', 'Reservation modified'), ('reservation_modified_official', 'Reservation modified official'), ('reservation_modified_by_official', 'Reservation modified by official'), ('reservation_created_with_access_code', 'Reservation created with access code'), ('reservation_created_with_access_code_official', 'Reservation created with access code official'), ('reservation_created_with_access_code_by_official', 'Reservation created with access code by official'), ('reservation_confirmed', 'Reservation confirmed'), ('reservation_denied', 'Reservation denied'), ('reservation_access_code_created', 'Access code was created for a reservation'), ('catering_order_created', 'Catering order created'), ('catering_order_modified', 'Catering order modified'), ('catering_order_deleted', 'Catering order deleted'), ('reservation_comment_created', 'Reservation comment created'), ('catering_order_comment_created', 'Catering order comment created'), ('reservation_bulk_created', 'Reservation bulk created')], db_index=True, max_length=100, verbose_name='Type'),
        ),
        migrations.CreateModel(
            name='NotificationTemplateGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time of creation')),
                ('modified_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time of modification')),
                ('identifier', models.CharField(max_length=100, verbose_name='Identifier')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notificationtemplategroup_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notificationtemplategroup_modified', to=settings.AUTH_USER_MODEL, verbose_name='Modified by')),
                ('templates', models.ManyToManyField(blank=True, related_name='groups', to='notifications.NotificationTemplate', verbose_name='Templates')),
            ],
            options={
                'verbose_name': 'Notification template groups',
                'verbose_name_plural': 'Notification template groups',
                'ordering': ('name',),
            },
        ),
        migrations.AddField(
            model_name='notificationtemplate',
            name='template_group',
            field=models.ForeignKey(blank=True, help_text='Select the template group that the template is going to be a part of, to set template as the default leave blank.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='notifications.NotificationTemplateGroup', verbose_name='Template group'),
        ),
    ]
