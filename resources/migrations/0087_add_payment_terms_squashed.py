# Generated by Django 2.2.10 on 2020-02-28 10:31

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import multi_email_field.fields


class Migration(migrations.Migration):

    replaces = [('resources', '0087_auto_20190912_1016'), ('resources', '0088_reservation_type'), ('resources', '0089_auto_20190912_1224'), ('resources', '0090_auto_20190912_1228'), ('resources', '0091_resource_cooldown'), ('resources', '0092_auto_20190912_1419'), ('resources', '0093_auto_20190913_0810'), ('resources', '0080_payments_related_changes'), ('resources', '0081_reservation_type'), ('resources', '0094_merge_20190913_1100'), ('resources', '0095_auto_20190913_1151'), ('resources', '0096_auto_20190913_1157'), ('resources', '0097_auto_20190916_0804'), ('resources', '0098_auto_20190916_0825'), ('resources', '0099_auto_20190917_0944'), ('resources', '0100_auto_20190917_0951'), ('resources', '0101_auto_20190917_1427'), ('resources', '0102_unit_map_service_id'), ('resources', '0103_auto_20190919_0951'), ('resources', '0104_auto_20190924_0915'), ('resources', '0082_unit_data_sources'), ('resources', '0105_merge_20191028_0900'), ('resources', '0106_resource_resource_staff_emails'), ('resources', '0107_auto_20191030_1154'), ('resources', '0108_reservation_require_workstation'), ('resources', '0109_reservationbulk'), ('resources', '0110_auto_20200124_1322'), ('resources', '0111_auto_20200127_0856'), ('resources', '0083_create_can_bypass_payment_perm'), ('resources', '0084_accessibility_model_changes'), ('resources', '0085_additions_to_permissions'), ('resources', '0086_more_additions_to_permissions'), ('resources', '0112_merge_20200226_1211')]

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('resources', '0086_auto_20190912_0928'),
    ]

    operations = [
        migrations.AlterField(
            model_name='reservation',
            name='state',
            field=models.CharField(choices=[('created', 'created'), ('cancelled', 'cancelled'), ('confirmed', 'confirmed'), ('denied', 'denied'), ('requested', 'requested')], default='created', max_length=16, verbose_name='State'),
        ),
        migrations.RemoveField(
            model_name='resource',
            name='age_restriction',
        ),
        migrations.AlterField(
            model_name='reservation',
            name='state',
            field=models.CharField(choices=[('created', 'created'), ('cancelled', 'cancelled'), ('confirmed', 'confirmed'), ('denied', 'denied'), ('requested', 'requested'), ('cooldown', 'cooldown')], default='created', max_length=16, verbose_name='State'),
        ),
        migrations.AlterField(
            model_name='reservation',
            name='state',
            field=models.CharField(choices=[('created', 'created'), ('cancelled', 'cancelled'), ('confirmed', 'confirmed'), ('denied', 'denied'), ('requested', 'requested')], default='created', max_length=16, verbose_name='State'),
        ),
        migrations.AddField(
            model_name='reservation',
            name='billing_email_address',
            field=models.EmailField(blank=True, max_length=254, verbose_name='Billing email address'),
        ),
        migrations.AddField(
            model_name='reservation',
            name='billing_first_name',
            field=models.CharField(blank=True, max_length=100, verbose_name='Billing first name'),
        ),
        migrations.AddField(
            model_name='reservation',
            name='billing_last_name',
            field=models.CharField(blank=True, max_length=100, verbose_name='Billing last name'),
        ),
        migrations.AddField(
            model_name='reservation',
            name='billing_phone_number',
            field=models.CharField(blank=True, max_length=30, verbose_name='Billing phone number'),
        ),
        migrations.AlterField(
            model_name='reservation',
            name='state',
            field=models.CharField(choices=[('created', 'created'), ('cancelled', 'cancelled'), ('confirmed', 'confirmed'), ('denied', 'denied'), ('requested', 'requested'), ('waiting_for_payment', 'waiting for payment')], default='created', max_length=32, verbose_name='State'),
        ),
        migrations.AddField(
            model_name='reservation',
            name='type',
            field=models.CharField(choices=[('normal', 'Normal reservation'), ('blocked', 'Resource blocked')], default='normal', max_length=32, verbose_name='Type'),
        ),
        migrations.AlterField(
            model_name='reservation',
            name='state',
            field=models.CharField(choices=[('created', 'created'), ('cancelled', 'cancelled'), ('confirmed', 'confirmed'), ('denied', 'denied'), ('requested', 'requested'), ('waiting_for_payment', 'waiting for payment')], default='created', max_length=32, verbose_name='State'),
        ),
        migrations.AlterField(
            model_name='resource',
            name='slot_size',
            field=models.DurationField(blank=True, default=datetime.timedelta(0, 1800), null=True, verbose_name='Slot size for reservation time'),
        ),
        migrations.AddField(
            model_name='resource',
            name='cooldown',
            field=models.DurationField(blank=True, default=datetime.timedelta(0), null=True, verbose_name='Reservation cooldown'),
        ),
        migrations.AddField(
            model_name='resource',
            name='max_age',
            field=models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='Age restriction (max)'),
        ),
        migrations.AddField(
            model_name='resource',
            name='min_age',
            field=models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='Age restriction (min)'),
        ),
        migrations.AlterModelOptions(
            name='unit',
            options={'ordering': ('name',), 'permissions': [('unit:can_approve_reservation', 'Can approve reservation'), ('unit:can_make_reservations', 'Can make reservations'), ('unit:can_modify_reservations', 'Can modify reservations'), ('unit:can_ignore_opening_hours', 'Can make reservations outside opening hours'), ('unit:can_view_reservation_access_code', 'Can view reservation access code'), ('unit:can_view_reservation_extra_fields', 'Can view reservation extra fields'), ('unit:can_access_reservation_comments', 'Can access reservation comments'), ('unit:can_view_reservation_catering_orders', 'Can view reservation catering orders'), ('unit:can_modify_reservation_catering_orders', 'Can modify reservation catering orders'), ('unit:can_view_reservation_product_orders', 'Can view reservation product orders'), ('unit:can_modify_paid_reservations', 'Can modify paid reservations')], 'verbose_name': 'unit', 'verbose_name_plural': 'units'},
        ),
        migrations.AlterField(
            model_name='resource',
            name='reservation_additional_information',
            field=models.TextField(blank=True, verbose_name='Reservation additional information'),
        ),
        migrations.AlterField(
            model_name='resource',
            name='reservation_additional_information_en',
            field=models.TextField(blank=True, null=True, verbose_name='Reservation additional information'),
        ),
        migrations.AlterField(
            model_name='resource',
            name='reservation_additional_information_fi',
            field=models.TextField(blank=True, null=True, verbose_name='Reservation additional information'),
        ),
        migrations.AlterField(
            model_name='resource',
            name='reservation_additional_information_sv',
            field=models.TextField(blank=True, null=True, verbose_name='Reservation additional information'),
        ),
        migrations.AddField(
            model_name='unit',
            name='map_service_id',
            field=models.IntegerField(blank=True, null=True, verbose_name='Map service ID'),
        ),
        migrations.AlterField(
            model_name='reservation',
            name='number_of_participants',
            field=models.PositiveSmallIntegerField(blank=True, default=1, null=True, verbose_name='Number of participants'),
        ),
        migrations.AddField(
            model_name='unit',
            name='data_source',
            field=models.CharField(blank=True, default='', max_length=128, verbose_name='External data source'),
        ),
        migrations.AddField(
            model_name='unit',
            name='data_source_hours',
            field=models.CharField(blank=True, default='', max_length=128, verbose_name='External data source for opening hours'),
        ),
        migrations.AddField(
            model_name='resource',
            name='resource_staff_emails',
            field=multi_email_field.fields.MultiEmailField(blank=True, null=True, verbose_name='E-mail addresses for client correspondence'),
        ),
        migrations.AddField(
            model_name='reservation',
            name='require_workstation',
            field=models.BooleanField(default=False, verbose_name='Require workstation'),
        ),
        migrations.CreateModel(
            name='ReservationBulk',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time of creation')),
                ('modified_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time of modification')),
                ('bucket', models.ManyToManyField(db_index=True, related_name='reservationbulks', to='resources.Reservation')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reservationbulk_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reservationbulk_modified', to=settings.AUTH_USER_MODEL, verbose_name='Modified by')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReservationReminder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reminder_date', models.DateTimeField(verbose_name='Reminder Date')),
                ('notification_type', models.CharField(blank=True, max_length=32, null=True, verbose_name='Notification type')),
                ('action_by_official', models.BooleanField(blank=True, null=True, verbose_name='Action by official')),
                ('reservation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Reservations', to='resources.Reservation', verbose_name='Reservation')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Users', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.AddField(
            model_name='reservation',
            name='reminder',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ReservationReminders', to='resources.ReservationReminder', verbose_name='Reservation Reminder'),
        ),
        migrations.AddField(
            model_name='unit',
            name='sms_reminder',
            field=models.BooleanField(default=False, verbose_name='Send SMS Reminder'),
        ),
        migrations.AddField(
            model_name='unit',
            name='sms_reminder_delay',
            field=models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(8766)], verbose_name='How many hours before reservation the reminder is sent'),
        ),
        migrations.AlterModelOptions(
            name='unit',
            options={'ordering': ('name',), 'permissions': [('unit:can_approve_reservation', 'Can approve reservation'), ('unit:can_make_reservations', 'Can make reservations'), ('unit:can_modify_reservations', 'Can modify reservations'), ('unit:can_ignore_opening_hours', 'Can make reservations outside opening hours'), ('unit:can_view_reservation_access_code', 'Can view reservation access code'), ('unit:can_view_reservation_extra_fields', 'Can view reservation extra fields'), ('unit:can_view_reservation_user', 'Can view reservation user'), ('unit:can_access_reservation_comments', 'Can access reservation comments'), ('unit:can_comment_reservations', 'Can create comments for a reservation'), ('unit:can_view_reservation_catering_orders', 'Can view reservation catering orders'), ('unit:can_modify_reservation_catering_orders', 'Can modify reservation catering orders'), ('unit:can_view_reservation_product_orders', 'Can view reservation product orders'), ('unit:can_modify_paid_reservations', 'Can modify paid reservations'), ('unit:can_bypass_payment', 'Can bypass payment for paid reservations'), ('unit:can_create_staff_event', 'Can create a reservation that is a staff event'), ('unit:can_create_special_type_reservation', 'Can create reservations of a non-normal type'), ('unit:can_bypass_manual_confirmation', 'Can bypass manual confirmation requirement for resources'), ('unit:can_create_reservations_for_other_users', 'Can create reservations for other registered users')], 'verbose_name': 'unit', 'verbose_name_plural': 'units'},
        ),
        migrations.AlterField(
            model_name='accessibilityvalue',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Time of creation'),
        ),
        migrations.AlterField(
            model_name='accessibilityvalue',
            name='modified_at',
            field=models.DateTimeField(auto_now=True, verbose_name='Time of modification'),
        ),
        migrations.AlterField(
            model_name='accessibilityviewpoint',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Time of creation'),
        ),
        migrations.AlterField(
            model_name='accessibilityviewpoint',
            name='modified_at',
            field=models.DateTimeField(auto_now=True, verbose_name='Time of modification'),
        ),
        migrations.AlterField(
            model_name='accessibilityviewpoint',
            name='name',
            field=models.CharField(max_length=200, verbose_name='Name'),
        ),
        migrations.AlterField(
            model_name='accessibilityviewpoint',
            name='name_en',
            field=models.CharField(max_length=200, null=True, verbose_name='Name'),
        ),
        migrations.AlterField(
            model_name='accessibilityviewpoint',
            name='name_fi',
            field=models.CharField(max_length=200, null=True, verbose_name='Name'),
        ),
        migrations.AlterField(
            model_name='accessibilityviewpoint',
            name='name_sv',
            field=models.CharField(max_length=200, null=True, verbose_name='Name'),
        ),
        migrations.AlterField(
            model_name='accessibilityviewpoint',
            name='order_text',
            field=models.CharField(default='0', max_length=200, verbose_name='Järjestys'),
        ),
        migrations.AlterField(
            model_name='resourceaccessibility',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Time of creation'),
        ),
        migrations.AlterField(
            model_name='resourceaccessibility',
            name='modified_at',
            field=models.DateTimeField(auto_now=True, verbose_name='Time of modification'),
        ),
        migrations.AlterField(
            model_name='resourceaccessibility',
            name='resource',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accessibility_summaries', to='resources.Resource', verbose_name='Resource'),
        ),
        migrations.AlterField(
            model_name='unitaccessibility',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Time of creation'),
        ),
        migrations.AlterField(
            model_name='unitaccessibility',
            name='modified_at',
            field=models.DateTimeField(auto_now=True, verbose_name='Time of modification'),
        ),
        migrations.AlterField(
            model_name='unitaccessibility',
            name='unit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accessibility_summaries', to='resources.Unit', verbose_name='Resource'),
        ),
        migrations.AlterModelOptions(
            name='resourcegroup',
            options={'ordering': ('name',), 'permissions': [('group:can_approve_reservation', 'Can approve reservation'), ('group:can_make_reservations', 'Can make reservations'), ('group:can_modify_reservations', 'Can modify reservations'), ('group:can_ignore_opening_hours', 'Can make reservations outside opening hours'), ('group:can_view_reservation_access_code', 'Can view reservation access code'), ('group:can_view_reservation_extra_fields', 'Can view reservation extra fields'), ('group:can_view_reservation_user', 'Can view reservation user'), ('group:can_access_reservation_comments', 'Can access reservation comments'), ('group:can_comment_reservations', 'Can create comments for a reservation'), ('group:can_view_reservation_catering_orders', 'Can view reservation catering orders'), ('group:can_modify_reservation_catering_orders', 'Can modify reservation catering orders'), ('group:can_view_reservation_product_orders', 'Can view reservation product orders'), ('group:can_modify_paid_reservations', 'Can modify paid reservations'), ('group:can_bypass_payment', 'Can bypass payment for paid reservations'), ('group:can_create_staff_event', 'Can create a reservation that is a staff event'), ('group:can_create_special_type_reservation', 'Can create reservations of a non-normal type'), ('group:can_bypass_manual_confirmation', 'Can bypass manual confirmation requirement for resources'), ('group:can_create_reservations_for_other_users', 'Can create reservations for other registered users')], 'verbose_name': 'Resource group', 'verbose_name_plural': 'Resource groups'},
        ),
    ]
